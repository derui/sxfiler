syntax = "proto3";

enum Command {
  UNKNOWN_COMMAND= 0;
  FILER_INITIALIZE = 1;
  FILER_RELOAD_ALL= 2;
  FILER_MOVE_LOCATION= 3;
  FILER_UPDATED= 4;
  FILER_COPY_INTERACTION= 5;
  FILER_MOVE_INTERACTION= 6;
  FILER_DELETE_INTERACTION  = 7;
  KEYMAP_ADD_KEY_BINDING= 8;
  KEYMAP_REMOVE_KEY_BINDING= 9;
  KEYMAP_GET = 10;
  KEYMAP_RELOAD = 11;
  KEYMAP_UPDATED = 12;
  FILER_OPEN_FILE_ITEM = 13;
  CONFIGURATION_GET = 14;
  FILER_UP_DIRECTORY = 15;
  FILER_TOGGLE_MARK_OF_ITEM = 16;
  FILER_UPDATED_FILE_WINDOW = 17;
  COMPLETER_INITIALIZE = 18;
  COMPLETER_COMPLETE = 19;
  COMPLETER_NOTIFY_COMPLETED = 20;
  FILER_MOVE = 21;
  FILER_COPY = 22;
  FILER_DELETE = 23;
  CONFIGURATION_UPDATE = 24;
  CONFIGURATION_NOTIFY_UPDATED = 25;
  THEME_GET = 26;
  THEME_UPDATE = 27;
}

// common request
message Request {
  string id = 1;
  Command command = 2;
  bytes payload = 3;
}

enum Status {
  UNKNOWN_STATUS = 0;
  SUCCESS = 1;
  INVALID_REQUEST_PAYLOAD = 2;
  COMMAND_FAILED = 3;
}

message ErrorDetail {
  string field = 1;
  string error_message = 2;
}

message Error {
  int32 status = 1;
  string error_message = 2;
  repeated ErrorDetail details = 3;
}

// common response. Field `id' must same value of the request.
message Response {
  string id = 1;
  Status status = 5;
  bytes payload = 2;
  Error error = 4;
}

// filer server service. This service needs to implement on server.
service FilerService {
  // initialize filer
  rpc initialize(Request) returns (Response);

  // reload filer to apply current status
  rpc reloadAll(Request) returns (Response);

  // move location of the side
  rpc moveLocation(Request) returns (Response);

  // open a file item.
  // NOTE: current implementation allows only [Directory].
  rpc openFileItem(Request) returns (Response);

  // up directory of the side.
  rpc upDirectory(Request) returns (Response);

  // toggle mark of the item
  rpc toggleMarkOfItem(Request) returns (Response);

  // move items
  rpc move(Request) returns (Response);

  // copy items
  rpc copy(Request) returns (Response);

  // delete items
  rpc delete(Request) returns (Response);

  // notification to request interaction
  rpc requireUserDecisionForCopy(Request) returns (Response);
  rpc requireUserDecisionForMove(Request) returns (Response);
  rpc requireUserDecisionForDelete(Request) returns (Response);

  // notification that filer updated
  rpc notifyUpdated(Request) returns (Response);
  rpc notifyUpdatedFileWindow(Request) returns (Response);
}

// keymap service
service KeymapService {
  rpc get(Request) returns (Response);
  rpc reload(Request) returns (Response);
  rpc addKeyBinding(Request) returns (Response);
  rpc removeKeyBinding(Request) returns (Response);

  // notification to propagate updates of keymap
  rpc notifyUpdated(Request) returns (Response);
}

// configuration service
service ConfigurationService {
  rpc get(Request) returns (Response);
  rpc update(Request) returns (Response);

  rpc notifyUpdated(Request) returns (Response);
}

// completer service
service CompleterService {
  rpc initialize(Request) returns (Response);
  rpc complete(Request) returns (Response);

  rpc notifyCompleted(Request) returns (Response);
}

// theme service
service ThemeService {
  rpc add(Request) returns (Response);
  rpc remove(Request) returns (Response);
  rpc list(Request) returns (Response);
}
