syntax = "proto3";

enum Side {
  LEFT = 0;
  RIGHT = 1;
}

enum Direction {
  LEFT_TO_RIGHT = 0;
  RIGHT_TO_LEFT = 1;
}

enum Target {
  MARKED = 0;
  ONE = 1;
}

message Capability {
  bool writable = 1;
  bool readable = 2;
  bool executable = 3;
}

message Mode {
  Capability owner = 1;
  Capability group = 2;
  Capability others = 3;
}

message FileStat {
  Mode mode = 1;
  int32 uid = 2;
  int32 gid = 3;
  string atime = 4;
  string ctime = 5;
  string mtime = 6;
  string size = 7;
  string link_path = 11;
  bool is_directory = 8;
  bool is_file = 9;
  bool is_symlink = 10;
}

message FileItem {
  string id = 1;
  string parent = 2;
  string name = 3;
  string full_path = 4;
  FileStat stat = 5;
  bool has_link_path = 6;
  string link_path = 7;
  bool marked = 8;
}

message FileItemOrder {
  string file_id = 1;
  int64 sort_level = 2;
}

message FileList {
  string id = 3;
  string location = 1;
  repeated FileItem items = 2;
  repeated FileItemOrder file_item_orders = 5;
}

message LocationHistory {
  repeated LocationRecord records = 1;
}

message LocationRecord {
  string location = 1;
  string timestamp = 2;
}

message FileWindow {
  FileList file_list = 1;
  LocationHistory history = 2;
}

// domain representation type
message Filer {
  FileWindow left_file_window = 1;
  FileWindow right_file_window = 2;
}

message InitializeRequest {
  string left_location = 1;
  string right_location = 2;
}
message InitializeResponse {}

message ReloadAllRequest {}
message ReloadAllResponse {}

message MoveLocationRequest {
  string location = 1;
  Side side = 2;
}
message MoveLocationResponse {}

message UpDirectoryRequest {
  Side side = 1;
}
message UpDirectoryResponse {
  bool moved = 1;
}

message OpenFileItemRequest {
  string file_item_id = 1;
  Side side = 2;
}

message OpenFileItemResponse {
  enum OpenResult {
    NOT_IMPLEMENTED = 0;
    DIRECTORY_OPENED = 1;
  }

  OpenResult result = 1;
}

message ToggleMarkOfItemRequest {
  string item_id = 1;
  Side side = 2;
}
message ToggleMarkOfItemResponse {}

// common action of user decision
enum Action {
  RENAME = 0;
  OVERWRITE = 1;
  CANCEL = 2;
}

message CopyUserDecisionRequest {
  FileItem item = 1;
}
message CopyUserDecisionResponse {
  Action action = 1;
  string new_name = 2;
}

message MoveUserDecisionRequest {
  FileItem item = 1;
}
message MoveUserDecisionResponse {
  Action action = 1;
  string new_name = 2;
}

message DeleteUserDecisionRequest {
  FileItem item = 1;
}
message DeleteUserDecisionResponse {
  bool confirmed = 1;
}

message Transfer {
  Direction direction = 1;
  Target target = 2;
  string target_id = 3;
}

enum TransferStatus {
  SUCCESS = 0;
  FAILED = 1;
  CANCELED = 2;
}

message TransferResult {
  string source = 1;
  string destination = 2;
  TransferStatus status = 3;
  string timestamp = 4;
}

message MoveRequest {
  Transfer transfer = 1;
}
message MoveResponse {
  repeated TransferResult results = 1;
}

message CopyRequest {
  Transfer transfer = 1;
}
message CopyResponse {
  repeated TransferResult results = 1;
}

message DeleteResult {
  string path = 1;
  string timestamp = 2;
}

message DeleteRequest {
  Side side = 1;
  Target target = 2;
  string target_id = 3;
}
message DeleteResponse {
  repeated DeleteResult results = 1;
}

enum FileEventType {
  ADD = 0;
  DELETE = 1;
  UPDATE = 2;
}

message FileEvent {
  FileEventType event_type = 1;
  FileItem file_item = 2;
}

// declaration to notify file event
message FileEventNotificationRequest {
  string file_list_id = 1;
  repeated FileEvent events = 2;
  repeated FileItemOrder file_item_orders = 3;
}
message FileEventNotificationResponse {}

// declarations notification service from server to client.
// This service need to implement on client.
message UpdatedNotificationRequest {
  Filer filer = 1;
}

message UpdatedNotificationResponse {}

// This notification notifies updated the file window of the side
message UpdatedFileWindowNotificationRequest {
  FileWindow file_window = 1;
  Side side = 2;
}
message UpdatedFileWindowNotificationResponse {}