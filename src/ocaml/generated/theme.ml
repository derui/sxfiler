(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(* Source: theme.proto Syntax: proto3 Parameters: debug=false annot='[@@deriving eq, show, protocol ~driver:(module
   Protocol_conv_json.Json)]' opens=[] int64_as_int=true int32_as_int=true fixed_as_int=false singleton_record=true *)

open Ocaml_protoc_plugin.Runtime [@@warning "-33"]

module Theme = struct
  module rec ColorPair : sig
    val name' : unit -> string

    type t = {
      name : string;
      hex_color : string;
    }
    [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    val to_proto : t -> Runtime'.Writer.t

    val from_proto : Runtime'.Reader.t -> (t, [> Runtime'.Result.error ]) result
  end = struct
    let name' () = "theme.theme.ColorPair"

    type t = {
      name : string;
      hex_color : string;
    }
    [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    let to_proto =
      let apply ~f:f' { name; hex_color } = f' [] name hex_color in
      let spec = Runtime'.Serialize.C.(basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: nil) in
      let serialize = Runtime'.Serialize.serialize [] spec in
      fun t -> apply ~f:serialize t

    let from_proto =
      let constructor _extensions name hex_color = { name; hex_color } in
      let spec = Runtime'.Deserialize.C.(basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: nil) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
  end

  and ColorTheme : sig
    val name' : unit -> string

    type t = { color_pairs : ColorPair.t list } [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    val to_proto : t -> Runtime'.Writer.t

    val from_proto : Runtime'.Reader.t -> (t, [> Runtime'.Result.error ]) result
  end = struct
    let name' () = "theme.theme.ColorTheme"

    type t = { color_pairs : ColorPair.t list } [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    let to_proto =
      let apply ~f:f' { color_pairs } = f' [] color_pairs in
      let spec = Runtime'.Serialize.C.(repeated (1, message (fun t -> ColorPair.to_proto t), not_packed) ^:: nil) in
      let serialize = Runtime'.Serialize.serialize [] spec in
      fun t -> apply ~f:serialize t

    let from_proto =
      let constructor _extensions color_pairs = { color_pairs } in
      let spec = Runtime'.Deserialize.C.(repeated (1, message (fun t -> ColorPair.from_proto t), not_packed) ^:: nil) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
  end

  and GetRequest : sig
    val name' : unit -> string

    type t = unit [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    val to_proto : t -> Runtime'.Writer.t

    val from_proto : Runtime'.Reader.t -> (t, [> Runtime'.Result.error ]) result
  end = struct
    let name' () = "theme.theme.GetRequest"

    type t = unit [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    let to_proto =
      let apply ~f () = f [] in
      let spec = Runtime'.Serialize.C.(nil) in
      let serialize = Runtime'.Serialize.serialize [] spec in
      fun t -> apply ~f:serialize t

    let from_proto =
      let constructor _extension = () in
      let spec = Runtime'.Deserialize.C.(nil) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
  end

  and GetResponse : sig
    val name' : unit -> string

    type t = { theme : ColorTheme.t option } [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    val to_proto : t -> Runtime'.Writer.t

    val from_proto : Runtime'.Reader.t -> (t, [> Runtime'.Result.error ]) result
  end = struct
    let name' () = "theme.theme.GetResponse"

    type t = { theme : ColorTheme.t option } [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    let to_proto =
      let apply ~f:f' { theme } = f' [] theme in
      let spec = Runtime'.Serialize.C.(basic_opt (1, message (fun t -> ColorTheme.to_proto t)) ^:: nil) in
      let serialize = Runtime'.Serialize.serialize [] spec in
      fun t -> apply ~f:serialize t

    let from_proto =
      let constructor _extensions theme = { theme } in
      let spec = Runtime'.Deserialize.C.(basic_opt (1, message (fun t -> ColorTheme.from_proto t)) ^:: nil) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
  end

  and UpdateRequest : sig
    val name' : unit -> string

    type t = {
      color_pairs : ColorPair.t list;
      base_theme : string;
    }
    [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    val to_proto : t -> Runtime'.Writer.t

    val from_proto : Runtime'.Reader.t -> (t, [> Runtime'.Result.error ]) result
  end = struct
    let name' () = "theme.theme.UpdateRequest"

    type t = {
      color_pairs : ColorPair.t list;
      base_theme : string;
    }
    [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    let to_proto =
      let apply ~f:f' { color_pairs; base_theme } = f' [] color_pairs base_theme in
      let spec =
        Runtime'.Serialize.C.(
          repeated (1, message (fun t -> ColorPair.to_proto t), not_packed) ^:: basic (2, string, proto3) ^:: nil)
      in
      let serialize = Runtime'.Serialize.serialize [] spec in
      fun t -> apply ~f:serialize t

    let from_proto =
      let constructor _extensions color_pairs base_theme = { color_pairs; base_theme } in
      let spec =
        Runtime'.Deserialize.C.(
          repeated (1, message (fun t -> ColorPair.from_proto t), not_packed) ^:: basic (2, string, proto3) ^:: nil)
      in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
  end

  and UpdateResponse : sig
    val name' : unit -> string

    type t = { theme : ColorTheme.t option } [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    val to_proto : t -> Runtime'.Writer.t

    val from_proto : Runtime'.Reader.t -> (t, [> Runtime'.Result.error ]) result
  end = struct
    let name' () = "theme.theme.UpdateResponse"

    type t = { theme : ColorTheme.t option } [@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]

    let to_proto =
      let apply ~f:f' { theme } = f' [] theme in
      let spec = Runtime'.Serialize.C.(basic_opt (1, message (fun t -> ColorTheme.to_proto t)) ^:: nil) in
      let serialize = Runtime'.Serialize.serialize [] spec in
      fun t -> apply ~f:serialize t

    let from_proto =
      let constructor _extensions theme = { theme } in
      let spec = Runtime'.Deserialize.C.(basic_opt (1, message (fun t -> ColorTheme.from_proto t)) ^:: nil) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
  end
end
