name: Build release packages for Linux
on:
  push:
    tags:
    - 'v*'

jobs:
  build_node:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('./yarn-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    - run: yarn
    - run: yarn test --all
    - run: yarn build
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: node
        path: build

  package_linux:
    runs-on: ubuntu-latest
    needs: [build_node]

    steps:
    - uses: actions/checkout@v1

    - name: Build the Docker image for linux
      run: docker build . -f misc/Dockerfile.builder.alpine -t builder:linux
    - name: Build linux binary
      run: docker run --rm -v $(pwd):/sxfiler:rw -w /sxfiler builder:linux /sxfiler/scripts/build.sh linux

    - name: Build the packager image
      run: docker build . -f misc/Dockerfile.packager -t packager
    - name: Download a single artifact
      uses: actions/download-artifact@v2
      with:
        name: node
        path: build

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('./yarn-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    - run: yarn
    - run: docker run --rm -v $(pwd):/sxfiler:rw -w /sxfiler packager /sxfiler/scripts/package.sh linux
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux-binary
        path: dist/sxfiler-linux-x64.tar.gz

  package_windows:
    runs-on: ubuntu-latest
    needs: [build_node]

    steps:
    - uses: actions/checkout@v1
    - name: Build the Docker image
      run: docker build . -f misc/Dockerfile.builder.debian -t builder:windows

    - name: Build windows binary
      run: docker run --rm -v $(pwd):/sxfiler:rw -w /sxfiler builder:windows /sxfiler/scripts/build.sh windows

    - name: Build the packager image
      run: docker build . -f misc/Dockerfile.packager -t packager
    - name: Download a single artifact
      uses: actions/download-artifact@v2
      with:
        name: node
        path: build
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('./yarn-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    - run: yarn
    - run: docker run --rm -v $(pwd):/sxfiler:rw -w /sxfiler packager /sxfiler/scripts/package.sh win32
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: windows-binary
        path: dist/sxfiler-win32-x64.zip

  create_release:
    runs-on: ubuntu-latest
    needs: [package_linux, package_windows]
    steps:
    - name: Download a single artifact
      uses: actions/download-artifact@v2
      with:
        name: windows-binary
    - name: Download a linux binary
      uses: actions/download-artifact@v2
      with:
        name: linux-binary
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: sxfiler-linux-x64.tar.gz
        asset_name: sxfiler-linux_amd64.tar.gz
        asset_content_type: application/zip

    - name: Upload Release windows
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./dist/sxfiler-win32-x64.zip
        asset_name: ./dist/sxfiler-windows_amd64.zip
        asset_content_type: application/zip
